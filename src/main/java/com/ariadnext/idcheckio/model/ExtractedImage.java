/**
 * IdCheck.IO API
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ariadnext.idcheckio.model;

import java.util.Objects;
import com.ariadnext.idcheckio.model.ImageIndicator;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * ExtractedImage
 */

public class ExtractedImage   {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    @SerializedName("CROPPED_RECTO")
    RECTO("CROPPED_RECTO"),
    
    @SerializedName("CROPPED_VERSO")
    VERSO("CROPPED_VERSO"),
    
    @SerializedName("CROPPED_FACE")
    FACE("CROPPED_FACE"),
    
    @SerializedName("CROPPED_SIGNATURE")
    SIGNATURE("CROPPED_SIGNATURE"),
    
    @SerializedName("CROPPED_EMITTER_SIGNATURE")
    EMITTER_SIGNATURE("CROPPED_EMITTER_SIGNATURE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("imageDL")
  private List<byte[]> imageDL = new ArrayList<byte[]>();

  @SerializedName("imageIR")
  private List<byte[]> imageIR = new ArrayList<byte[]>();

  @SerializedName("imageUV")
  private List<byte[]> imageUV = new ArrayList<byte[]>();

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("indicators")
  private List<ImageIndicator> indicators = new ArrayList<ImageIndicator>();

  public ExtractedImage type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ExtractedImage imageDL(List<byte[]> imageDL) {
    this.imageDL = imageDL;
    return this;
  }

  public ExtractedImage addImageDLItem(byte[] imageDLItem) {
    this.imageDL.add(imageDLItem);
    return this;
  }

   /**
   * Get imageDL
   * @return imageDL
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<byte[]> getImageDL() {
    return imageDL;
  }

  public void setImageDL(List<byte[]> imageDL) {
    this.imageDL = imageDL;
  }

  public ExtractedImage imageIR(List<byte[]> imageIR) {
    this.imageIR = imageIR;
    return this;
  }

  public ExtractedImage addImageIRItem(byte[] imageIRItem) {
    this.imageIR.add(imageIRItem);
    return this;
  }

   /**
   * Get imageIR
   * @return imageIR
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<byte[]> getImageIR() {
    return imageIR;
  }

  public void setImageIR(List<byte[]> imageIR) {
    this.imageIR = imageIR;
  }

  public ExtractedImage imageUV(List<byte[]> imageUV) {
    this.imageUV = imageUV;
    return this;
  }

  public ExtractedImage addImageUVItem(byte[] imageUVItem) {
    this.imageUV.add(imageUVItem);
    return this;
  }

   /**
   * Get imageUV
   * @return imageUV
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<byte[]> getImageUV() {
    return imageUV;
  }

  public void setImageUV(List<byte[]> imageUV) {
    this.imageUV = imageUV;
  }

  public ExtractedImage page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public ExtractedImage indicators(List<ImageIndicator> indicators) {
    this.indicators = indicators;
    return this;
  }

  public ExtractedImage addIndicatorsItem(ImageIndicator indicatorsItem) {
    this.indicators.add(indicatorsItem);
    return this;
  }

   /**
   * Get indicators
   * @return indicators
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<ImageIndicator> getIndicators() {
    return indicators;
  }

  public void setIndicators(List<ImageIndicator> indicators) {
    this.indicators = indicators;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtractedImage extractedImage = (ExtractedImage) o;
    return Objects.equals(this.type, extractedImage.type) &&
        Objects.equals(this.imageDL, extractedImage.imageDL) &&
        Objects.equals(this.imageIR, extractedImage.imageIR) &&
        Objects.equals(this.imageUV, extractedImage.imageUV) &&
        Objects.equals(this.page, extractedImage.page) &&
        Objects.equals(this.indicators, extractedImage.indicators);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, imageDL, imageIR, imageUV, page, indicators);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtractedImage {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    imageDL: ").append(toIndentedString(imageDL)).append("\n");
    sb.append("    imageIR: ").append(toIndentedString(imageIR)).append("\n");
    sb.append("    imageUV: ").append(toIndentedString(imageUV)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    indicators: ").append(toIndentedString(indicators)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

